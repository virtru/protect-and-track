# Deploy using gitflow
#
# Basic idea:
# * Developers almost always patch to master first.
# * Releases happen on a branch
# * They can cherry-pick (or ffwd-merge, aka no-fault rebase) to releases
# * Once a release goes out it is tagged. Tags are on releases, these may or
#   may not be in a history.
#
# Where do deployments go:
# master -> develop01
# feature/* -> develop[X] after select
# release/* -> staging
# v* -> production after block & shout

env:
  AWS_ACCOUNT_ALIAS: common
  ENVIRONMENT_NAME: common
  DEPLOY_ENVIRONMENT_NAME: production
  S3_HOSTNAME: demos.developer.virtru.com
  USE_NODE_12: true

steps:
  - label: ':gear: build & unit test'
    commands:
      - buildkite-agent pipeline upload .buildkite/pre.yml

  - wait

  - label: ':gear: :rocket: develop'
    trigger: protect-and-track-deploy
    build:
      message: '[develop] ${BUILDKITE_MESSAGE}'
      commit: '${BUILDKITE_COMMIT}'
      branch: '${BUILDKITE_BRANCH}'
      env:
        BLOCK_DEPLOY: 'build.branch =~ /^feature\//'
        VIRTRU_ENV: develop01
        S3_PATH: protect-develop
    branches: master feature/*

  - wait

  - label: ':gear: :rocket: staging'
    trigger: protect-and-track-deploy
    build:
      message: '[staging] ${BUILDKITE_MESSAGE}'
      commit: '${BUILDKITE_COMMIT}'
      branch: '${BUILDKITE_BRANCH}'
      env:
        BLOCK_DEPLOY: 'build.branch == "master"'
        VIRTRU_ENV: staging
        S3_PATH: 'protect-staging'
    branches: 'master release/*'

  - wait

  - label: ':gear: :rocket: production [blocked]'
    trigger: protect-and-track-deploy
    build:
      message: '[production] ${BUILDKITE_MESSAGE}'
      commit: '${BUILDKITE_COMMIT}'
      branch: '${BUILDKITE_BRANCH}'
      env:
        VIRTRU_ENV: production
        S3_PATH: 'protect'
    branches: 'release/*'

  - wait

  - block: 'Tag release?'
    branches: 'release/*'

  - label: 'Tag Release'
    command: '.buildkite/scripts/cut-release.sh'
    branches: 'release/*'
